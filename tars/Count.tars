
module Base
{
    enum RetValue
    {
        RT_SUCC = 0,            //成功
        RT_DATA_ERROR  = -1,    //读写数据失败
        RT_APPLY_ERROR = -2,    //应用数据到存储失败
    };

    struct CountReq
    {
        0 optional  string                  sBusinessName;               // 业务ID，方便跟进问题
        1 optional  string                  sKey;                        // 当前业务下的计数key
        2 optional  int                     iNum = 1;                    // 计数num（每次调用计数新增数量）
        3 optional  int                     iDefault = 1;                // 初始设置值时的缺省值
    };

    struct CircleReq
    {
        0 optional  string                  sBusinessName;               // 业务ID，方便跟进问题
        1 optional  string                  sKey;                        // 当前业务下的计数key
        2 optional  int                     iNum = 1;                    // 计数num（每次调用计数新增数量）
        3 optional  int                     iMinNum = 1;                 // 计数最小值num
        4 optional  int                     iMaxNum = 10000;             // 计数最大值num
    };

    struct CountRsp
    {
        0 optional  int                     iRet;                       // 状态码
        1 optional  string                  sMsg;                       // 消息内容
        2 optional  long                    iCount;                     // 当前计数值
    };

    struct QueryReq
    {
        0 optional  string                  sBusinessName;              // 业务ID，方便跟进问题
        1 optional  string                  sKey;                       // 当前业务下的计数key
        2 optional  bool                    leader = true;              // leader处理
    };

    interface Count
    {
        /**
         * 计数请求, 每次计数值增加iNum, 并返回最新值
         */
        int count(CountReq req, out CountRsp rsp);

        /**
         * 循环计数, 从最小值开始, 每次计数值增加iNum, 当计数增加到最大值, 则又重新从最小值计数
         */
        int circleCount(CircleReq req, out CountRsp rsp);

        /**
         * 查询当前计数值
         */
        int query(QueryReq req, out CountRsp rsp);
    };
};