name: build-master

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: env
        run: env
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: docker.tarsyun.com
          username: ${{ secrets.name }}
          password: ${{ secrets.pass }}
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.MY_TOKEN }}
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      # - name: Set up QEMU
      #   run: |
      #     docker run --rm --privileged tonistiigi/binfmt:latest --install all
      # - name: Create Build
      #   run: |
      #     export DOCKER_CLI_EXPERIMENTAL=enabled
      #     docker buildx create --name builder --driver docker-container  --buildkitd-flags '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host' --use
      #     docker buildx inspect --bootstrap --builder builder
      # - name: Buildx
      #   run: |
      #     docker buildx build . --file Dockerfile --tag test --platform=linux/amd64,linux/arm64 -o type=docker
      - name: pull arm64
        run: |
          docker pull tarscloud/base-compiler --platform=arm64
      - name: build arm64
          docker run -v `pwd`:/data tarscloud/base-compiler sh -c "cd /data; mkdir build; cd build; cmake ..; make -j8"
      - name: build docker arm64
        run: |
          exec-build-cloud.sh tarscloud/tars.cppbase cpp build/bin/CountServer yaml/values.yaml ${{ steps.get_version.outputs.VERSION }}  true
      - name: build_amd64
        run: |
          docker pull tarscloud/base-compiler --platform=amd64
          docker run -v `pwd`:/data tarscloud/base-compiler sh -c "cd /data; mkdir build; cd build; cmake ..; make -j8"
      - name: build docker amd64
        run: |
          exec-build-cloud.sh tarscloud/tars.cppbase cpp build/bin/CountServer yaml/values.yaml ${{ steps.get_version.outputs.VERSION }}  true
